" Plugin manager https://github.com/junegunn/vim-plug
"
" Run
" :PlugInstall to install new plugins
" :PlugStatus to view plugin status
"
" Specify a directory for plugins
call plug#begin('~/.vim/plugged')

" Shorthand notation fetches https://github.com/jamessan/vim-gnupg
Plug 'jamessan/vim-gnupg'

" Dark code syntax mode that is easier on my eyes than solarized dark
Plug 'tomasiser/vim-code-dark'

" Improved tabs when running in the terminal instead of implementing it myself as described in:
" https://vi.stackexchange.com/questions/11276/print-full-filename-in-tabs-when-using-terminal-vim
" http://vimhelp.appspot.com/tabpage.txt.html#setting-tabline
Plug 'webdevel/tabulous'

" Realtime syntax checking for Vim 8+
Plug 'w0rp/ale'

" Show a git diff in the gutter
Plug 'airblade/vim-gitgutter'

" Improved status line
Plug 'itchyny/lightline.vim'

" Change surrpunding characters
Plug 'tpope/vim-surround'

" Add :Rename to rename a file
Plug 'danro/rename.vim'

" Provides more powerful line join features than the build-in :join
Plug 'sk1418/Join'

" Hilight trailing whitespace
Plug 'ntpeters/vim-better-whitespace'

" Fuzzy file finder (file and tag)
Plug 'ctrlpvim/ctrlp.vim'

" Awesome debugger plugin
Plug 'vim-vdebug/vdebug'

" Improve indentation of HTML within PHP files
Plug 'captbaritone/better-indent-support-for-php-with-html'

" Color colornames and codes. Use :ColorHilight and :ColorClear
Plug 'chrisbra/Colorizer'

" Integrate with Dash (https://kapeli.com/dash)
" :Dash (search under cursor), :Dash printf (search keyword), :Dash printf php (search in php docset)
Plug 'rizzatti/dash.vim'

" Chained tab completion. If a match is not found using one completion method, try others.  For
" example, try the language server then tags then local bufffer completion.
Plug 'lifepillar/vim-mucomplete'

" --------------------------------------------------------------------------------
" Syntax hilighters

" A collection of language packs for Vim
Plug 'sheerun/vim-polyglot'

" Improved SQL hilight mode
Plug 'shmup/vim-sql-syntax'

call plug#end()

" Detect the system name for customizations
let s:uname=substitute(system('uname'), '\n', '', '')

" Better colors for a dark/light background
if has('gui_running')
    set background=dark
    set lines=80 columns=150
" Set the font for windows
"    set guifont=Consolas:h9:cANSI
" Set the font for linux (must have the font installed)
"    set guifont=Source\ Code\ Pro\ Light\ 9
" Set the font for OSX
"    set guifont=Consolas:h12
"    set guifont=SourceCodePro-Regular:h12
    set guifont=Source\ Code\ Variable\ Regular:h12
else
    set background=dark
endif

" --------------------------------------------------------------------------------
" Color schemes
"
" Solarized color scheme: http://ethanschoonover.com/solarized
"
" Option for low contrast
" let g:solarized_contrast="high"
"
" Variables that may need to be set for the solarized color palette. Enable this in OSX terminal when
" using Solarized color scheme. Disable it in Konsole or the background is yellowish.
if s:uname == "Darwin"
    let g:solarized_termcolors=256
endif

" May need to set this if the terminal only supports 256 colors (especially in light mode)
" set t_Co=256

" codedark is easier on my eyes for coding
colorscheme codedark

" --------------------------------------------------------------------------------
" General options

" Case-sensitive if search contains an uppercase character
set ignorecase
set smartcase
" Show matches as you type
set incsearch

" Syntax hilighting on
syntax enable

" Allow any buffer to be hidden (keeping its changes) without first writing to a file.
" Useful when switching buffers during testing.
set hidden

" Show line numbers (can't cut and paste in the terminal)
if has('gui_running')
    set number
endif

" Indent 4 spaces per indent and Use spaces for indentation
set tabstop=4
set shiftwidth=4
set expandtab
set textwidth=100

" Show matching braces but not gt/lt or we get a visual bell on object property dereferences
set showmatch
set matchpairs-=<:>

" Show line/column information
set ruler

" Disable beeps
set vb t_vb=

" Display filename (tail) and plus for modified files in tabs instead of whole path
set guitablabel=%t\ %M

" --------------------------------------------------------------------------------
" File extension overrides

" Use PHP syntax for view files
autocmd BufNewFile,BufRead *.view set filetype=php

" Customize SQL files for MySQL
autocmd BufNewFile,BufRead *.sql set filetype=mysql

" Set 2 space indents for HTML files only
autocmd BufRead,BufNewFile *.htm,*.html setlocal tabstop=2 shiftwidth=2 softtabstop=2

" --------------------------------------------------------------------------------
" Keymaps

" Disable text line wrapping
imap <F1> <C-o>:set formatoptions-=t<CR>
" Enable text line wrapping
imap <F2> <C-o>:set formatoptions+=t<CR>
" Shortcut for toggling paste mode (disabling auto-indent when pasting)
set pastetoggle=<F3>
" Toggle hilighting seaerch matches.
map <F4> :set hlsearch!<CR>
imap <F4> <C-o>:set hlsearch!<CR>

" Trim whitespace from the end of all lines
nnoremap <silent> <F12> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" Map ctrl-a to select all text on the screen (rather than incrementing an integer)
" map <C-a> <esc>ggVG<CR>

" Map navigation keys that I don't use to tab commands
map <C-h> :tabp<CR>
map <C-n> :tabnew<CR>

" Map Ctrl-Backspace/Del to delete the previous/next word in insert mode.
imap <C-BS> <C-W>
imap <C-Del> <C-O>dw

" Map Mac move to start/end of line keys for consistency
noremap <C-a> <Home>
noremap <C-e> <End>
noremap <C-k> D
inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-k> <C-O>D

" --------------------------------------------------------------------------------
" Search for the .tags file. The './' adds the current directory to the file name.
" The ';' at the end causes a recursively upward search. Use './.tags;' to start searching
" in the directory of the current file rather than Vim's working directory.
" See https://vim.fandom.com/wiki/Browsing_programs_with_tags
set tags=./.tags;

" Set current directory the same as the directory of the file
set autochdir

" --------------------------------------------------------------------------------
" Set formatting options. See http://vimdoc.sourceforge.net/htmldoc/change.html#fo-table

" Auto-wrap comments using textwidth
set formatoptions+=c
" Do not auto-wrap text (e.g., code)
set formatoptions-=t
" Insert the current comment leader after hitting enter?
set formatoptions-=r
" Do not insert the current comment leader after hitting 'o'
set formatoptions-=o
" Recognize numbered lists
set formatoptions+=n
" Allow formatting of comments with "gq"
set formatoptions+=q
" Long lines are not broken in insert mode
set formatoptions+=l

" Some plugins (e.g., filetype plugins) are loaded after the .vimrc file and overwrite
" options defined here. Automatically re-apply formatting options when any file is loaded.
" We can apply it to all filetypes or whenever a new file is read.
" Note that formatoptions-=cro does not work.
"
" Running ':verb set fo' will show you where an option was last set
" Running :set <option>? will display the options current value
" autocmd FileType * setlocal formatoptions+=cnql formatoptions-=tro foldmethod=manual
autocmd FileType * setlocal formatoptions+=cnql formatoptions-=o formatoptions-=r formatoptions-=t foldmethod=manual

" --------------------------------------------------------------------------------
" File Explorer (netrw) options :Vexplore
" See http://vimdoc.sourceforge.net/htmldoc/pi_netrw.html

let g:netrw_banner = 0
" Listing style (0=simple, 1=show timestamps, 2=multi-column, 3=tree)
let g:netrw_liststyle = 3
" Open new files in (0=same window, 1=hsplit, 2=vsplit, 3=new tab, 4=prev window)
let g:netrw_browse_split = 4
" Split right
let g:netrw_altv = 1
let g:netrw_winsize = 25

" Don't show dotfiles
let g:netrw_list_hide='^\.'

" --------------------------------------------------------------------------------
" Since in PHP braces are not required inside 'case/default' blocks, by default they are indented at
" the same level than the 'switch()' to avoid unnecessary indentation indent 'case:' and 'default:'
" statements in switch() blocks:
let g:PHP_vintage_case_default_indent = 1

" --------------------------------------------------------------------------------
" vim-json config (https://github.com/elzr/vim-json)

" Disable concealing of quotes by default. Makes it easier to cut and paste.
let g:vim_json_syntax_conceal = 0

" --------------------------------------------------------------------------------
" Markdown configuration

" In markdown mode, don't automatically indent lists. I want to do this manually.
let g:vim_markdown_new_list_item_indent = 0
" Disable folding
let g:vim_markdown_folding_disabled = 1

" --------------------------------------------------------------------------------
" Lightline configuration
" Fix for dark/missing status line
set laststatus=2

" --------------------------------------------------------------------------------
" Ale configuration
" Note that Ale will use the phpcs.xml file in the root directory

" Don't constantly lint, give me a chance to type (default 200ms)
let g:ale_lint_delay=5000
let g:ale_php_phpcs_standard='psr2'

" Completion menu should always show and automatically insert if there is only one match
" See :h completeopt
set completeopt=menuone,longest

" Vim's default JS completion does not use the language server so force Ale's
autocmd BufNewFile,BufReadPost *.js set omnifunc=ale#completion#OmniFunc

" --------------------------------------------------------------------------------
" MUcomplete configuration
"
" See :h mucomplete-customization
" See https://github.com/lifepillar/vim-mucomplete/blob/master/doc/mucomplete.txt (Customization)

" By default omni-completion is tried only if there is a keyword character in front of the cursor
" but I want to be able to use the Ale language server client to introspect class properties so
" enable completion after a '->' or '::'.

let s:omni_cond = { t -> t =~# '\m\%(\k\|->\|::\)$' }
let g:mucomplete#can_complete = {}
let g:mucomplete#can_complete.default = { 'omni': s:omni_cond }

" Customize completions to use (add 'tags', remove 'uspl')
let g:mucomplete#chains = {}
let g:mucomplete#chains.default = ['omni', 'keyn', 'tags', 'path', 'dict' ]

" --------------------------------------------------------------------------------
" CtrlP configuration

" Set local working dir to the nearest ancestor of the current file that contains
" revision control (.git) or the directory of the current file
let g:ctrlp_working_path_mode = 'ra'
" configure results window
let g:ctrlp_match_window = 'min:4,max:10,results:50'
" Enable extensions (see :help ctrlp-extensions)
let g:ctrlp_extensions = ['tag']
" Set regexp search as the default. I find this matches filenames better.
let g:ctrlp_regexp = 1

" The Silver Searcher (brew install ag)
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command='ag %s -l --nocolor --hidden -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" --------------------------------------------------------------------------------
" VDebug

" Store options in a separate file so we can easily update the path maps w/o sourcing the whole
" vimrc
if filereadable(expand("~/.vimrc-xdebug"))
  source ~/.vimrc-xdebug
endif

" --------------------------------------------------------------------------------
" Set default sql mode
let g:sql_type_default='mysql'
